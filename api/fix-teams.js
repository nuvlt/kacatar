// api/fix-teams.js
// Mevcut teams collection'ƒ± d√ºzeltir ve eksik takƒ±mlarƒ± ekler

const admin = require("firebase-admin");
const { findTeamLogo } = require("./logo-service");

if (!admin.apps.length) {
  const svc = process.env.FIREBASE_SERVICE_ACCOUNT;
  if (svc) {
    admin.initializeApp({
      credential: admin.credential.cert(JSON.parse(svc)),
    });
  }
}
const db = admin.firestore();

module.exports = async (req, res) => {
  try {
    const { key } = req.query;
    if (key !== process.env.SECRET_KEY) {
      return res.status(403).json({ error: "Unauthorized" });
    }

    console.log("\nüîß Teams Collection D√ºzeltiliyor...\n");

    const apiKeys = {
      sportmonks: process.env.SPORTMONKS_API_KEY,
      thesportsdb: process.env.THESPORTSDB_KEY,
      googleKey: process.env.GOOGLE_SEARCH_KEY,
      googleCx: process.env.GOOGLE_CX,
    };

    // 1Ô∏è‚É£ Mevcut teams'i d√ºzelt
    console.log("üìù Adƒ±m 1: Mevcut teams yapƒ±sƒ± d√ºzeltiliyor...");
    const teamsSnapshot = await db.collection("teams").get();
    let fixed = 0;
    
    for (const doc of teamsSnapshot.docs) {
      const data = doc.data();
      const docId = doc.id;
      
      // Eƒüer name field'ƒ± yoksa, doc ID'yi name olarak kullan
      const teamName = data.name || docId;
      const teamLogo = data.logo || null;
      
      await doc.ref.set({
        name: teamName,
        nameLower: teamName.toLowerCase().trim(),
        logo: teamLogo,
        createdAt: data.createdAt || new Date().toISOString(),
        lastChecked: new Date().toISOString(),
      }, { merge: true });
      
      fixed++;
      console.log(`‚úÖ D√ºzeltildi: ${teamName}`);
    }
    
    console.log(`\n‚úÖ ${fixed} takƒ±m yapƒ±sƒ± d√ºzeltildi\n`);

    // 2Ô∏è‚É£ Matches'den eksik takƒ±mlarƒ± tespit et
    console.log("üìù Adƒ±m 2: Matches'den eksik takƒ±mlar bulunuyor...");
    const matchesSnapshot = await db.collection("matches").get();
    const uniqueTeams = new Set();
    
    matchesSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.home) uniqueTeams.add(data.home);
      if (data.away) uniqueTeams.add(data.away);
      if (data.homeTeam) uniqueTeams.add(data.homeTeam);
      if (data.awayTeam) uniqueTeams.add(data.awayTeam);
    });
    
    console.log(`üîç Matches'de ${uniqueTeams.size} farklƒ± takƒ±m bulundu`);

    // 3Ô∏è‚É£ Teams'de olmayan takƒ±mlarƒ± bul
    const updatedTeamsSnapshot = await db.collection("teams").get();
    const existingTeams = new Set();
    
    updatedTeamsSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.nameLower) existingTeams.add(data.nameLower);
    });
    
    const missingTeams = Array.from(uniqueTeams).filter(team => {
      return team && !existingTeams.has(team.toLowerCase().trim());
    });
    
    console.log(`‚ùå Teams'de eksik ${missingTeams.length} takƒ±m var\n`);

    // 4Ô∏è‚É£ Eksik takƒ±mlar i√ßin logo bul ve ekle
    let added = 0;
    let foundLogos = 0;
    
    for (const teamName of missingTeams) {
      console.log(`\nüîç Logo aranƒ±yor: ${teamName}`);
      
      const logo = await findTeamLogo(teamName, apiKeys);
      
      await db.collection("teams").add({
        name: teamName,
        nameLower: teamName.toLowerCase().trim(),
        logo: logo,
        createdAt: new Date().toISOString(),
        lastChecked: new Date().toISOString(),
      });
      
      if (logo) {
        foundLogos++;
        console.log(`‚úÖ Logo bulundu: ${teamName}`);
      } else {
        console.log(`‚ö†Ô∏è Logo bulunamadƒ±: ${teamName}`);
      }
      
      added++;
    }

    // 5Ô∏è‚É£ Matches'i g√ºncelle (logolarƒ± teams'den al)
    console.log("\nüìù Adƒ±m 3: Matches collection g√ºncelleniyor...");
    
    // T√ºm takƒ±mlarƒ± map olarak al
    const finalTeamsSnapshot = await db.collection("teams").get();
    const teamsMap = {};
    
    finalTeamsSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.nameLower) {
        teamsMap[data.nameLower] = data.logo || "";
      }
    });
    
    // Matches'i g√ºncelle
    let updatedMatches = 0;
    
    for (const doc of matchesSnapshot.docs) {
      const data = doc.data();
      const home = data.home || data.homeTeam;
      const away = data.away || data.awayTeam;
      
      const homeLogo = teamsMap[home?.toLowerCase().trim()] || "";
      const awayLogo = teamsMap[away?.toLowerCase().trim()] || "";
      
      await doc.ref.update({
        homeLogo: homeLogo,
        awayLogo: awayLogo,
      });
      
      updatedMatches++;
    }
    
    console.log(`‚úÖ ${updatedMatches} ma√ß g√ºncellendi\n`);

    const result = {
      ok: true,
      message: "‚úÖ Teams collection d√ºzeltildi ve matches g√ºncellendi",
      stats: {
        fixedTeams: fixed,
        addedTeams: added,
        foundNewLogos: foundLogos,
        updatedMatches: updatedMatches,
        totalTeams: finalTeamsSnapshot.size,
      },
      timestamp: new Date().toISOString(),
    };

    console.log("üìä Sonu√ß:", JSON.stringify(result, null, 2));
    return res.status(200).json(result);

  } catch (error) {
    console.error("‚ùå Fix teams error:", error);
    return res.status(500).json({
      error: error.message || String(error),
      stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
    });
  }
};
